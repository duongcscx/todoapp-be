# This is a basic workflow to help you get started with Actions

name: CI/CD Asiggment (Thu 28 Jul 2022)

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

  workflow_dispatch:

jobs:
  testing:
    name: Testing (Unit, Integration)
    runs-on: ubuntu-latest
    
    env:
      PORT: 3001
      NODE_ENV: "development"
      DB_HOST: "localhost"
      DB_USERNAME: "todo"
      DB_NAME: "todo"
      DB_PASSWORD: "tester@123"
      DB_PORT: 5432
      HASH_KEY_PASSWORD: "HASH_KEY_PASSWORD"
      TOKEN_SECRET_KEY: "TOKEN_SECRET_KEY"
      TOKEN_EXPIRES_IN: "240m"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: yarn

      - name: Run unit tests
        run: yarn test

  static_code_analysis:
    name: Static code analysis
    runs-on: ubuntu-latest
    # needs: testing

    env:
      PORT: 3001
      NODE_ENV: "development"
      DB_HOST: "localhost"
      DB_USERNAME: "todo"
      DB_NAME: "todo"
      DB_PASSWORD: "tester@123"
      DB_PORT: 5432
      HASH_KEY_PASSWORD: "HASH_KEY_PASSWORD"
      TOKEN_SECRET_KEY: "TOKEN_SECRET_KEY"
      TOKEN_EXPIRES_IN: "240m"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          
      - name: Install dependencies
        run: yarn
        
      - name: Run coverage report
        run: yarn coverage

      - run: yarn add typescript

      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.2.0
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}
          
  dependency_check:
    name: Dependency Check
    runs-on: ubuntu-latest
    # needs: static_code_analysis

    env:
      PORT: 3001
      NODE_ENV: "development"
      DB_HOST: "localhost"
      DB_USERNAME: "todo"
      DB_NAME: "todo"
      DB_PASSWORD: "tester@123"
      DB_PORT: 5432
      HASH_KEY_PASSWORD: "HASH_KEY_PASSWORD"
      TOKEN_SECRET_KEY: "TOKEN_SECRET_KEY"
      TOKEN_EXPIRES_IN: "240m"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          
      - name: Install dependencies
        run: yarn

      - run: npm install -g depcheck

      - name: Dependency Check
        run: npx depcheck

  secret_scan:
    name: Secret scan
    runs-on: ubuntu-latest
    # needs: dependency_check
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Git Leaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license_check:
    name: License check
    runs-on: ubuntu-latest
    # needs: dependency_check
    env:
      PORT: 3001
      NODE_ENV: "development"
      DB_HOST: "localhost"
      DB_USERNAME: "todo"
      DB_NAME: "todo"
      DB_PASSWORD: "tester@123"
      DB_PORT: 5432
      HASH_KEY_PASSWORD: "HASH_KEY_PASSWORD"
      TOKEN_SECRET_KEY: "TOKEN_SECRET_KEY"
      TOKEN_EXPIRES_IN: "240m"

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true # improve performance on subsequent runs
          cache-version: 1
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: npm # cache dependencies for faster subsequent runs.
      # install your projects dependencies
      - name: Install dependencies
        run: yarn
      - run: bundle install --system
      - name: License check
        uses: jonabc/licensed-ci@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          command: bundle exec licensed

  container_scan:
    name: Container scan
    runs-on: ubuntu-latest
    # needs: secret_scan
    env:
      PORT: 3001
      NODE_ENV: "development"
      DOCKLE_HOST: "unix:///var/run/docker.sock"

    steps:
      - uses: actions/checkout@v3

      - name: Build container
        run: docker build --build-arg ENV=$NODE_ENV --build-arg PORT=$PORT --no-cache . -t test_container
        
      - name: Scan container
        uses: Azure/container-scan@v0
        with:
          image-name: test_container:latest
